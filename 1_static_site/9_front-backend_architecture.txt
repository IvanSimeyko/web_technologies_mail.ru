FRONTEND AND BACKEND
Бывают разные виды запросов - за статическими файлами, за динамическими веб страницами, запросы к API (интерфейс для взаимодейсвтвия с другими системами) сайта, AJAX-запросы. Из всего этого веб-сервер сасомтоятельно способен отдавать только статические файлы. Все остальные запросы должны задействовать логику приложения. Для этого необходимо запустить программный код, который сгенерирует ответ. Далее в этой лекции мы понимаем под frontend - web server (nginx), под backend - apllication server.

Процесс передачи запроса от web servera к apllication server (для генерации html странички) называется проксированием.

Задачи frontend servera:
- отдача статических документов 
- проксирование (reverse proxy) - передача запросов на backend
- балансировка нагрузки - равномерно распределяет нагрузку между backendом
- кешировани
- сборка SSI - сборка вебстраницы из небольших кусочков
- авторизация, SSL, нарезка картинок, gzip - работа с клиентом

НАСТРОЙКА ПРОКСИРОВАНИЯ В NGINX
В конфиге пишем проимерно следующее:
lacation / {
    proxy.pass http://backend;
}
или так
lacation /partner/ {
    proxy.pass http://www.partner.com;
}

НАСТРОЙКА UPSTREAM В NGINX
Upstream - группа (набор) backend серверов, работающих под общим именем

ПРОТОКОЛ CGI
Comon Gateway Interface - предназначен для динамиеской генерации веб страницы. Для этого нужно вместо того, чтобы файлы отдавать их запускать. 
Т.е frontend получает запрос от клиента, запускает backend, передает ему данные, получает рузльтат и отдает его клиенту. Соглашения:
- метод QueryString, заголовки запроса - передаются через переменны окружения;
- тело запроса передается через STDIN;
- заголовки и тело ответа возвращаются через STDOUT;
- HTTP код ответа передается через псевдозаголовок Status
- поток ошибок STDERR направляется в лог ошибок сервера

ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ CGI
- REQUEST_METHOD -метод запроса
- PATH_INFO - путь из урл
- QUERY_STRING - фрагмент урла после ?
- REMOTE_ADDR - айпи адрес пользователя
- CONTENT_LENGTH - длина тела запроса
- HTTP_COOKIE - заголовок Cookie
- HTTP_ANY_HEADER_NAME - лубой другой  HTTP заголовок

WSGI
WSGI (англ. Web Server Gateway Interface, обычно произносится сообществом[каким?] как «висги» или «виски»[1][2][3]) — стандарт взаимодействия между Python-программой, выполняющейся на стороне сервера, и самим веб-сервером, например Apache.

По стандарту, WSGI-приложение должно удовлетворять следующим требованиям:
-должно быть вызываемым (callable) объектом (обычно это функция или метод)
-принимать два параметра: словарь переменных окружения (environ), функция-обработчик запроса (start_response)
- вызывать обработчик запроса с кодом HTTP-ответа и HTTP-заголовками
- возвращать итерируемый объект с телом ответа
Простейшим примером WSGI-приложения может служить такая функция-генератор:

def simplest_wsgi_app(environ, start_response):
     start_response('200 OK', [('Content-Type', 'text/plain')])
     yield 'Hello, world!'

Переменные, которые передаются в словаре environ:
CGI-like переменные: REQUEST_URL, ...
wsgi.version - версия WSGI протокола
и другие



