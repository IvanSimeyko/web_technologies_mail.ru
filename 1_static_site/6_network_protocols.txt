DNS (Domain Name System) - распределенная база даннных, хранящая информацию о доменах, в первую очередь отображение доменных имен на IP адреса машин, обслуживающих эти домены.
Что возвращает DNS сервер:
- A - Ipv4 адрес(а) для данного домена
- АААА - Ipv6 адрес(а)
- NS - адрес(а) DNS серверов обслуживающих данную зону.
MX - адрес(а) почтовых серверов для данного домена.

ТСР
Протокол IP реализует передачу данных между двумя машинами и не гарантирует передачу данных. Для того чтобы передать данные между двумя программами (а на сервере может быть запущено много программ) и обеспечить передачу данных используется протокол TCP.
Преймущества ТСР:
-надежная доставка
-полнодуплексная (двухстронняя) передача
-контроль потока - защита от переполнения.

ТСР-порты - это адрес сетевого соединения в пределах одного хоста. ТСР порты позволяют поддерживать множество открытых соединений на одной машине.
Номер порта - целое число, не больше 65535. Порты ниже 1024 требуют привелегий суперпользователя для использования.
20, 21 - FTP; 22- SSH; 25-SMTP; 80-HTTP; 443-HTTPS
Клиент отправляет SYN (тут отправляется специальный номер пакета). Сервер в ответ отправляет SYN (свой номер потока) + ACK (ответ что он принял SYN). Клиент отправяет ACK

Пример простейшего ТСP клиента:
import socket    # импорт библиотеки
reg = 'Hello tcp'   #
s = socket.soket(socket.AF_INET, socket.SOCK_STREAM)   # создаем новый объект сокет с двумя опциями: socket.AF_INET - показывает что мы работаем с сетевыми сокетами, socket.SOCK_STREAM - указывает что будет ТСР подключение. 
s.connect(('127.0.0.1', 1234))    # подклчение. Передаем адрес и порт машины к которой подключаемся. 
s.send(reg)    # отправляем данные
rsp = s.recv(1024)  # вызываем метод для получения данных. Передаем размер сколько данных мы хотим получить.
s.close    # закрытие соединения.

Пример простейшего ТСР сервера
import socket
s = socket.soket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('127.0.0.1', 1234))    # данный сокет связывается с этим адресом
s.listen(10)    # говорим что принимаем соединения на данном адресе. Цифра десять показывает длину очереди клиентов, которые могут ожидать ответа сервера
while True:
    conn, addr = s.accept()   #метод возвращается тогда когда установлено соединение с клиентом. Метод возвращает все переменные: сonn - сокет для работы с конкретным клиентом, addr - ip адрес клиента.
    while True:
        data = conn.recv(1024)   # сервер читает данные
        if not data: break     # если данных нет выходим из цикла
        conn.send(data)   # отправляем данные
    conn.close()

Как правильно читать данные из соккета?
def myreceiva(sock, msglen):
    msg = ''   # заводим буфер
    while len(msg) < msglen:    # пока длина буфера меньше количества данных которые планируем прочитать
        chunk = sock.recv(msglen - len(msg))    # читаем какой-то кучочек из сокета
        if chunk == '':    # если ничего не пришло - ошибка
            raise RuntimeError('broken')
        msg = msg + chunk    # если пришло записываем данные в наш буфер
    return msg

Как правильно записывать данные в сокет?
def mysend(sokc, msg):
    totalsent = 0   # переменная для подсчета сколько данных отправлено
    while totaalsent < len(msg):
        sent = sock.send(msg[totalsent:])   # отправляем данные со смещением. Метод возвращает число сколько данных удалось отправить. 
        if sent == 0:
            raise RuntimeError('broken')
        totalsent = tatalsent + sent


Длину документа нужно передавать во флагах???

Если браузер устанавливает соединение https, то это значит что он поверх HTTP соединения запускает соединение TLS.
Протокол TLS (transport layer security) - криптографический протокол обеспечивающий безопасную передачу данных между хостами в интернет
Обеспечивает:
-аутентификацию сервера и клиента;
-шифрование и сдатие передаваемой информации
-защита от подммены и целостности сообщений.
