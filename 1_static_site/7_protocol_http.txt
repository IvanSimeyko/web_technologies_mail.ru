Основной протоко по которому работают веб приложения. Существует большое количество задач, которые не решены в протоколе TCP и решаются в протоколе HTTP:
- передача метаинформация
- авторизация
- поддержка сессий
- кеширование документов - не передает документы, если они уже присутствут у клиента
- согласование содержимого - клиент моможет преложит сжимать документ, передавать его на каком-то определнном языке. Сервер может согласиться или отказаться
- управление соединением

Протокол работает по принципу запрос-ответ, протокол не поддерживает постоянно соединение - stateless, протокол текстовый и расширяемый (опции задаюся в виде заголовков).

HTTP/1.0 запрос

Перевод строки \r\n

Первая строка запроса - метод + адрес + версия протокола
Метод запроса - операция, котоорую мы осуществляем в данный момент

Далее идут заголовоки. Они состоят из двух частей - имя, значение. Имена заголовков не могут содержать пробелы. После всех заголовков идет пустая строка и тело запроса. 


HTTP-ответ

Первая трока - версия протокола по которой отвечает сервер и код ответа

Ниже идут заголовки (самый главный Content-Type), после них пустая строка, после чего сам документ.

Методы запроса.
GET - получение документа
HEAD - тоже, но сам документ не возвращается
POST - отправка данных на сервер (формы, документы и т.д.)
PUT - отправлка документа на сервер по указанному урлу
DELETE - удаление документа
CONNECT, TRACE, OPTIONS - получение информациии о сервере
COPY, MOVE, MKCOL - расширение WebDAV


Коды ответа
1хх - информационные коды

2-хх - успешное выполнение
200 - запрос выполнен
204 - запрос выполнен но документ пуст

3-хх - перенаправление
301 - документ сменил урл
302 - повтороить запрос по другому урлу
304 - документ не изменился, использовать кеш

4-хх - ошибка на стороне клиента
400 - неправильный синтаксис запроса
401 - требуется авторизация
403 - нет доступа (не верная авторизация)
404 - документ не найден

5-хх - ошибка на стороне сервера
500 - неожиданная ошибка сервера
502 - проксируемый сервер отвечает с ошибкой
504 - проксируемый сервер не отвечает


Заголовки (общие)
Content-Type - MIME тип документа (что это документ, картинка, js...)
Content-Length - длина тела запроса или ответа 
Content-Encoding - кодирование доменута (указывается сжатие и т.д)
Transfer-Encoding - кидирование, примененное  для передачи документа
Connection- управление соединением (если close, соединение должно быть закрыто)
Upgrade - смена протокола по которому работает соединение

Заголовки запросов
Authorization - содержит имя пользователя и пароль
Cookie - передача состояния сессии на сервер.
Referer - содержит урл предыдущего документа (можно проанализировать откуда призодят на сайт полльзователи)
User-Agent - описние веб клиента (можно отдавать разные данные разным киентам, например мобильным браузерам и обычным) 
If-Modified-Since - условное получение документа
Аccept - согласование (negotiation) содержимого (например браузер передает информацию готов ли он принимать архивированные данные)
User-Agent - информация о браузере

Заголовки ответов
Location - новый урл документа при перенаправлениях
Set-Cookie - установка состояния (сессии) в браузере
Last-Modified - дата последнего изменения документа 
Date - дата на сервере, для согласования кешей
Server - тип веб сервера

Упрвление соединением в HTTP/1.1
В HTTP/1.1 в пределах одного TCP соединения может быть осуществленно несколько запросов (например это очень ускорит загрузку js-файлов или картинок, для загрузки которых открывается новое соедиение), т.е. в HTTP/1.1 соединение закрывается если:
- сервер или клиент передали заголовок Connection: close
- по истечении таймаута (обычно около 10 с)
Иначе соединение останется открытым.
