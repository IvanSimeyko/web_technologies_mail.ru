ССS (cascading style sheets) - задает внешний вид тегов

Селекторы - способ задать элементы к которому применяем стили. 
* выбирает все свойства. исползуется обычно чтобы сбросить настройки браузера
Р - имя тегов
. - выбор по имени класса
# - выбор по id

Сложные селекторы удобно читать с конца:
div.article a - выбираем теги а внутри дивов с классом а
a > img - выбрать тег img если только он является первым потомком внутри тега a
h2.sic + p  '+' означает "после". Данный селектор выбирает все параграфы, которые идут полсе тега h2  с классом sic.

h1, h2 - группировка

Псевдоклассы - классы, которые добавляет браузр автоматически взависимости от некоторых условий (например действий пользователей) прямо на лету.
a:visited - посещенная ссылка
a:link - непосещенная ссылка
div:hover - элемент при наведении мышки
input:focus - элемент при получении фокуса
li:first-child - выбирает первого потомка среди множества элементов.

Псевдоэлементы - настоящие теги, но которые не присутствуют в исходном файле. Эти теги браузер создает сам в зависимости от стилей.
#el:after - виртуальный элемент сразу после #el
#el:before - виртуальный элемент сразу перед #el

Наследование и приоритеты.
Некоторые стили применяются не только к элементу, но и ко всем вложенным в него элементам. Как правило наследуются стили связанные со шрифтами, оформлением текста, цветом. Стили, которые связагы с позиционированием, размерами отступм как правило не наследуются.

Приоритеты.
В случае если два разных стиля конфликтуют мужду собой, применяется тот, что обладает большей специфичностью. Если специфичность двух стилей совпадает, применяется тот, что расположен ниже в HNML/CSS коде.

Правила расчета специфичности
Специфичность считается от того какие элементы расположены в селекторе. Чем больше специфичность, тем более вероятнее применение селектора
id - 100;
классы и псевдоклассы - 10;
теги и псевдоэлементы - 1;
Хорошая практика - не нужно давать конкретных стилей для низкоспецифичных селекторов.

Отображение элементов.
Есть стили, которые отвечают за отображение элементов на странице.
Режим отображения элементов (display):
display: none - элемент не видим, не занимает места.
display: block - элемент занимает максимальную ширину, начинается с новой строки, ему можно задать width, height (т.е. ведет себя как блочный элемент)
display: inline - элемент занимает минимальную ширину и не прерывавает строку, игнорирует width and height. (т.е. ведет себя как строчный элемент)
display: inline-block - блочный элемент, но не разрывает строку, примерно как <img>. (блочный элемент, который не разрывает строку)
Остальные display: см. документацию

Стиль float: - используется для обтекания текста и для позиционироания элементов. Если есть два float элемента они выстраиваются друг за другом (очень удобно использовать при верстку картинок).
Стиль clear: - отменяет всплывание, проводит черту. 

Стиль position - отвечает за позиционирование элементов
position: static - обычное расположение
position:  relative - смещение относительно начального местоположения на странице
position: absolute - если родитель relative, absolute or fixed - относительно родителя, иначе - относительно начала документа
position: fixed - относительно окна браузера (можно закрепить nav bar)
top, right, buttom, left - отступы, могут быть отрицательными. 

Отступы и box-model

Bootstrap
Сетка - способ деления всей ширины сайта на части. 
Адаптивная вестка - верстка для отображения на различных устройствах.
Пример:
<div class='col-md-4 col-lg-2'></div>
<div class='col-md-8 col-lg-10'></div> - правые стилиприменяются на больших экранах, левые а средних 
