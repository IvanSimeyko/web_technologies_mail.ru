GET AND POST FORMS
Get - метод для получения данных. Get запросы могут быть закешированы промежуточными серверами. Get должен применяться только в поисковых формах. При данныом методе данные сериализуются и попадают в урл (удобно если нужно кому-то передать ссылку.)

Post -метод для изменения данных. Post запросы не кешируются промежуточными серверами и применяются в формах, изменяющих данные на сервере. 

ОБЩИЙ СЦЕНАРИЙ ОБРАОТКИ ФОРМЫ
Заполнение, валидация, если не прошла - возвращаем страницу с формой (но с кодом 200) и покаываем где ошибки, 


РЕДИРЕКТ порядок - запрос от браузера на веб-сервер, обработка запроса и отдача 302 ответа с location, веб браузер делает новый запрос (обязательно гет) урл которого берет в location, сервер отдает hnml-страничку, браузер ее прорисовывает.

ПЕРЕНАПРАВЛЕНИЕ В DJANGO
HttpResponseRedirect('/new_url/') 
Можно пользователя редиректнуть на ту страницу с которой он пришел: url = request.GET.get('continue') и передаем полученный урл в объект HttpResponseRedirect. В данном случае нужно проверять домен сайта куда редиректнем, чтобы не выбросить пользователя за пределы своего сайта. 

DJANGO FORMS
Каждая форма наследуется от специального класса forms.Form. Помимо полей можно опредеить:
- метод clean(self) - отвечает за логику валидации формы в целом (пример на слайде). Чтобы сделать валидацию только какого-либо поля, то пишем метод clean_namefield (пример на слайде);
- метод save(self) - метод созранения данных формы.

Валидация данных:
- по типу поля, например EmailField (метод is_valid())
- clean_xxx - дополнителная проверка поля, может изменить значение
- clean - дополнительная проверка всех полей формы


