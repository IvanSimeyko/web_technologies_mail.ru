GET AND POST FORMS
Get - метод для получения данных. Get запросы могут быть закешированы промежуточными серверами. Get должен применяться только в поисковых формах. При данныом методе данные сериализуются и попадают в урл (удобно если нужно кому-то передать ссылку.)

Post -метод для изменения данных. Post запросы не кешируются промежуточными серверами и применяются в формах, изменяющих данные на сервере. 

ОБЩИЙ СЦЕНАРИЙ ОБРАОТКИ ФОРМЫ
Заполнение, валидация, если не прошла - возвращаем страницу с формой (но с кодом 200) и покаываем где ошибки, если прошла, то сохраняем данные и переотправляем пользователя на другую страничку.

РЕДИРЕКТ порядок - запрос от браузера на веб-сервер, обработка запроса и отдача 302 ответа с location, веб браузер делает новый запрос (обязательно гет) урл которого берет в location, сервер отдает html-страничку, браузер ее прорисовывает.

ПЕРЕНАПРАВЛЕНИЕ В DJANGO
HttpResponseRedirect('/new_url/') 
Можно пользователя редиректнуть на ту страницу с которой он пришел: url = request.GET.get('continue') и передаем полученный урл в объект HttpResponseRedirect. В данном случае нужно проверять домен сайта куда перенаправляем пользователя, чтобы не выбросить его за пределы своего сайта. 

DJANGO FORMS
Каждая форма наследуется от специального класса forms.Form. Помимо полей можно опредеить:
- метод clean(self) - отвечает за логику валидации формы в целом (пример на слайде). Чтобы сделать валидацию только какого-либо поля, то пишем метод clean_namefield (пример на слайде);
- метод save(self) - метод сохранения данных формы.

Валидация данных (метод is_valid()):
- по типу поля, например EmailField;
- clean_xxx - дополнителная проверка поля, может изменить значение;
- clean - дополнительная проверка всех полей формы.

ИСПОЛЬЗОВАНИЕ ВО VIEW
Если гет-запрос (отрисовываем форму): сделали эксемпляр класса с формой и передали его в шаблон для отрисовки.Это так называемая unbound форма - т.е. форма не привязанная к данным. 
-если пост запрос: заздаем экземпляр формы но передаем туда словарь с данными (request.POST) - получаем bound-форму (т.е форму связанную с данными), далее вызывем валидацию форму, если форма валидна, то сохраняем ее (метод save ()), и перенаправляем поьлзователя на новую страницу (как отправить на страницу с только что сохраненными данными (например при добавлении поста) см. презентацию)

ИСПОЛЬЗОВАНИЕ В ШАБЛОНАХ
Методы пользоваляющие преобразовать форму в готовый кусок html-кода. Этот метод использует все возможности форм зашитые в Django - валидация, подсказки, примеры ввода. Примеры:
{{ form.as_ul }} - список
{{ form.as_p }} - параграф
{{ form.as_table }} - таблица

Более сложный вариант - самому сверстать форму. Пример (классный!!!) см. призентацию.

MODEL FORMS - механизм, позволяющий постоить форму из модели. Поля при этом беруться из модели. Пример смю прирзентацию. На практике modelForm используют для простых случаев, для сложных они не достаточно гибки.

БЕЗОПАСНОСТЬ
Проверка пользователя.
Создаем класс формы и переопределям конструктор __init__ добавляя пользователя заполненной форме и дальше делаем валидацию формы. Пример см. презентацию. 

CSRF - cross site resource forgery.
csrf_token - длиная строка состояцая из разных символов которая отличается для каждого пользователя. Строка вставляется в куки
 
