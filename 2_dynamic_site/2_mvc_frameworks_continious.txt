DJANGO VIEWS

Обычные питон-функции, которые принимают на вход первым параметром объект реквест (django http HttpRequest) и возвращают объект django http Response.

def post_text(request):
    try:
        id = request.Get.get('id')   # id передается в урле в гет параметрах
        obj = Post.object.get(pk=id)
    except Post DoesNotExist:
        raise Http 404
    return HttpResponse(obj.text, content_type='text/plain')

ЗАХВАТ ПАРАМЕТРОВ ИЗ УРЛ
url(r'^category/(\d+)/$), 'category_view') - захват то что в скобках (пизиционные аргументы)

url(r'^(?P<pk>\d+)/$), 'post_detail') - захват, то что в угловых скобках (в переменную, хранятся в движке приложения и ее можно извлечь)

def post_details(request, pk) - передача аргументов

def category_view(request, *args, **kwargs):
    pk = args[0]
    pk = kwargs['pk'] - вьюшка у которой явно не прописанны какие либо параметры. *args - все позиционные параметры, **kwargs - все именованные параметры

HttpRequest
Переменные:
request.method - метод запроса
request.GET - словарь (а точнее QueryDict) с GET параметром
request.POST - словарь (а точнее QueryDict) с POST параметрами
request.COOKIES - словари с куки
request.FILES - словарь с загруженными файлами при post запросе. Ключ - имя интпута, значение - файловый дискриптор из которого можно читать файл
request.META - CGI-like переменные
request.session - словарь-сессия(*). Если записать в этот словарь переменную, то при следующем запросе она не исчезнет и ее можно будет прочитать
request.user - текущий пользователь

----------------
Middlware - это приложения, которые позволяют добавить нашему проекту некий функционал.
---------------


HttpResponse 
Создаем этот объект руками и заносим в него некоторые данные. Самый простой случай
responce = HttpResponse('<html>Hello world</html>')

Ответ состоит из таких частей - код ответа, заголовки ответа, тело ответа. Чтобы передать их полностью
response = HttpResponse(
    content = '<html>Hello world</html>',
    content_type = 'text/html',
    status = 404,
)

СПЕЦИАЛЬНЫЕ ТИПЫ ОТВЕТОВ
redirect = HttpResponseRedirect('/')   #302 код ответа задается автоматически
redirect = HttpResponsePermanentRedirect('/') #301
redirect = HttpResponseNotFound()    #404
redirect = HttpResponseForbidden('/')    #403
redirect = HttpResponseBadRequest()    #400

------
Все ошибки, которые возникают во вьюшках (например синтаксические или неправильное обращение по ключу словаря) вызывают 500-ю ошибку. 
-----

Получение get параметров
request.GET.get('page') or 1 - обращение по ключу. Если нет параметра по умолчанию то будет None
Best practies - всегда нужно проверять поьзовательские данные (try...except)

имеем такой урл - /path/?id=3&id=4&id=5
Получение значений:
id = request.GET.get('id')   # id is 5
id = request.GET.getlist('id')   # id is [3,4,5] , у обычных словарей такого метода нет
id = request.GET.urlencode() - сериализация урла id = '3&id=4&id=5'

Получение и установка Cookies
Установка
response = HttpResponse(html)
response.set_cookie('visited', 1)
Получение
is_visited = request.COOKIES.get('visited')


ДЕКОРАТОРЫ функций
Декораторы - функция, преобразующая одну функцию в другую, т.е. она изменяет поведение некоторой функции. Например:
def double_it(func):
    def tmp(*args):
        return func(*args) *2
    return tmp

@double_it
def mult(a, b):
    return a*b

mult(2,2) вернет 8

Декораторы в django нужно импортировать. 
@require_GET - только GET запросы
@require_POST - только POST запросы
@login_required(login_url='/login/') - говорит что определенная вьюшка может быть доступна лишь авторизированным пользователем. Если иначе - редиректнет на урл регистрации
@csrf_exempt - отключиь проверку CSRF

ШАБЛОНИЗАЦИЯ
Данные, которые получаем во вьюшках называют контекст.
Шаблонизатор - это библиотека которая смешивает контекст и шаблон html-страницы. Он встроен в django, но при желании можно подключить свой.
Шаблон - специальный файл, в котором содержиться html-код с некоторыми специальными конструкциями. 

Вывод переменных + использование фильтров {{ post.title|truncatechars:80 }}
{% for item in list %}
{% if var %}
{% include 'tpl.html' %}
{% comment %} {% endcomment %} - комментарии 
Во вьюшках с шаблонизатором связаны две функции render (рекомендуется использовать), render_to_response

НАСЛЕДОВАНИЕ ШАБЛОНОВ
Данный тип паттерна называется template method.

{% block A %}{{ block.super }}E{% endblock %} - данный тег написан в шаблоне, который наследует base.htlm. Он расширит block A базового шаблона и добавит к нему E

CONTEXT PROCESSORS
На практике получается, что на большинстве страниц всегда требуются опеределенный набор переменных. Эти переменные можно явно получать в контексте вьюшки и передавать в каждый шаблон. Но это не удобно. Для данных случаев используется специальный мезанизм context proccesors.
Context proccesors - функции, которые вызываются перед отрисовкой шаблона и могут добавить данные в контекст.
Настройка TEMPLATE_CONTEXT_PROCESSORS:
[
    'django.core.context_processors.csrf ',  #  переменная csrf_token
    'django.core.context_processors.request', #объект реквест (request)
    'django.contrib.auth.context_processors.auth', # переменные user and perms
    'django.core.context_processors.static', # переменная STATIC_URL - все пути к статическим файлам
]

context_processors вызываются при каждом вызове шаблона, поэтому важно не размещать там сложной логики и добавлять только те переменные, которые нужны на каждой странице сайта

render(request, template_name, context) - вызывает context_processors
render_to_response(template_name, context) - не вызывает context_processors

